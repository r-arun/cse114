Power Palindrome:
-----------------

A few students wrote the solution for palindrome numbers rather than palindromes.
The questions is similar to palindromes, you need to get four digits from left
to right as d0, d1, d2 and d3.

d0 and d3 are corresponding digits. d1 and d2 are corresponding digits.
Corresponding digits must be equal in 'normal' palindromes,
	d0 == d3 and d1 == d2

But in power palindromes, for each digit its corresponding digit must be
square or square root of that digit.

We need, d0 = square(d3) or  d0 = sqrt(d3)  -- (1)
Similarly, d3 = square(d0) or d3 = sqrt(d0) -- (2)
Also d1 = square(d2) or d1 = sqrt(d2)       -- (3)
d2 = square(d1) or d2 = sqrt(d1)            -- (4)

All of (1), (2), (3) and (4) must hold for a number to be a power palindrome.

We know that a = square(b) implies sqrt(a) = b.

d0 = sqrt(d3) implies d3 = square(d0). We can replace second sub-condition in (1) with
first sub-condition  in (2).

The same rule applies for every digit and its corresponding digits. We rewrite (1) to (4).

(1) -->  d0 = square(d3) or d3 = square(d0) -- (5)
(2) -->  d3 = square(d0) or d0 = square(d3) -- (6)
(3) -->  d1 = square(d2) or d2 = square(d1) -- (7)
(4) -->  d2 = square(d1) or d1 = square(d2) -- (8)

We can see that (5) is equivalent to (6) and, (7) is equivalent to (8).  We retain one of
the two equivalent conditions as follows.

  d0 = square(d3) or d3 = square(d0) -- (5)
  d1 = square(d2) or d2 = square(d1) -- (7)

Both (5) and (7) must hold for a number (d3,d2,d1,d0) to be a power palindrome.

Divisibility:
-------------
Take a look at the warm up divisibility test first for divisibility by 10.  Given a
number n, The idea is to get the left most digit (d0) by the operation n % 10. If this
number d0 is 0, n is divisible by 10.

We can get d0 without using mod operator by implementing (mod 10) by ourself.

quotient = num / 10
d0 = num - 10 * quotient, is equivalent to the modulus rule using (% 10).

For divisibility by 5, d0 must be either 5 or 0.
For divisibility by 2, d0 must be an even number less than 10.

Calculator:
-----------
Java allows you to switch case based on String Literals. We thought it was allowed only for 
integer and character constants (or literals but not variables). That's why we had a complex
maneuver to get the first character. Switching based on String Literals is easier.

Five Days of Summer:
--------------------
We know that when we encounter the first case condition that evaluates to true, we execute
all statements within that block until break and skip out of the switch block. But if there
is no break, rest of the case conditions (labels/tests) below that case are not evaluated at
all - a fall through. As a result, the statements in blocks after the first matching case are
all executed if we forget the break, resulting in bugs (remember logic errors). That's why use
of switch case structure is discouraged many a time. But why will a language have such a
feature that causes so many logic errors.

In C programming language, fall through was a useful feature, where they used switched
without break to perform useful computations (execute all after a condition is true). We try 
to do something similar in our example program.

PS: The accumulative gifts given in the problem is similar to The Twelve Days of Christmas
carol song.

Good, Bad, Excellent:
---------------------
The program tests your understanding of priority of evaluation among logical operators.
num % 2 || num % 3 && num % 5
is a valid check for goodness, && has higher priority.

If condition for goodness of a number is divisible by 2 or 3 and divisible by 5.
num % 2 || num % 3 && num % 5

will be invalid, and equivalent to our original condition. We need paranthesis to emphasis
precedence -  (num % 2 || num % 3) && num % 5.

2's complement:
---------------
The code for 1's complement is given. Just add 1 to the 1's complement as per defintion to
get the 2's complement.

EC1: Weather code using switch:
-------------------------------
We know that our switch cases can be only literals (constants) and not expressions using
variables. So (temp >= 40) can never be a valid 'case'. But we can see that temparture
ranges are within 10 number of each other and quotient after division by 10, is the same
for each color code (except the extremes).
For eg: 39/10 = 3 -> Yellow. 31/10 = 3 -> Yellow. 30 / 10 = 3 -> Yellow.

So we can switch using division by 10 as the case value with cases 3, 2 and 1.
For default case check if, temp >= 40 or temp < 10 and print color code accordingly.

EC2: Divisibility by 4, 8 and 10:
--------------------------------
We saw divisibility by 10 in the warmup example. Divisibility by 4 can be checked if the
number can be divided by 2 twice.

Step 1: Is num is divisible by 2? (Use question 2 solution.)
Step 2: If step 1 is true, num1 = num / 2
Step 3: Is num1 is divisible by 2? (Use question 2 solution.)
Step 4: If step 3 is true, num1 is divisible by and hence, num is divisible by 4.

Similarly we can check for divisibility by 8 similarly testing if the number is divisble
by 2 three times.

There is an easier general rule for divisibility by any power of 2. (Like 1, 2, 4, 8, etc).

Let's consider decimal number 3 in binary - 011. Multiplication by 2 is equivalent to 
appending a 0 at the end. So 3*2 = 6 is 0110 in binary.

Every even number has zero as the last bit in binary. Eg: 8 = 01000 and 12 = 01100.
Multiplying a number by 4 is equivalent to multiplying a number by 2 twice. So in binary,
we append two 0's to the binary representation. So all multiples of 4 have last two bits
in binary as 0 (Eg: 12 = 01100). Similarly all mutiples of 8 have last 3 bits as 0 in
binary.

The simplest test to check if last two bits are 0 is to & ('and' binary operator as opposed
to && logical operator), with 3 (11 in binary).

For example, 12 & 3 =
						01100 &
						00011 =
						-----
						00000
						-----
Hence 4 divides 12.

Let's check for 6, 6 & 3 =

						00110 &
						00011 =
						-----
						00010
						-----
The result is not equal to 0 and hence 4 does not divide 6.

For divisibility by 8, we need to check if last 3 bits are 0 and can & by 7 (111). Note that,
the rule applies only for powers of 2 and not any number in general.
